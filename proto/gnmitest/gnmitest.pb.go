// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/gnmitest/gnmitest.proto

package gnmitest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import report "github.com/openconfig/gnmitest/proto/report"
import suite "github.com/openconfig/gnmitest/proto/suite"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GNMITestClient is the client API for GNMITest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GNMITestClient interface {
	// Run runs the given Suite proto and returns Report proto.
	Run(ctx context.Context, in *suite.Suite, opts ...grpc.CallOption) (*report.Report, error)
}

type gNMITestClient struct {
	cc *grpc.ClientConn
}

func NewGNMITestClient(cc *grpc.ClientConn) GNMITestClient {
	return &gNMITestClient{cc}
}

func (c *gNMITestClient) Run(ctx context.Context, in *suite.Suite, opts ...grpc.CallOption) (*report.Report, error) {
	out := new(report.Report)
	err := c.cc.Invoke(ctx, "/gnmitest.GNMITest/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GNMITestServer is the server API for GNMITest service.
type GNMITestServer interface {
	// Run runs the given Suite proto and returns Report proto.
	Run(context.Context, *suite.Suite) (*report.Report, error)
}

func RegisterGNMITestServer(s *grpc.Server, srv GNMITestServer) {
	s.RegisterService(&_GNMITest_serviceDesc, srv)
}

func _GNMITest_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(suite.Suite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GNMITestServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gnmitest.GNMITest/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GNMITestServer).Run(ctx, req.(*suite.Suite))
	}
	return interceptor(ctx, in, info, handler)
}

var _GNMITest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gnmitest.GNMITest",
	HandlerType: (*GNMITestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _GNMITest_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gnmitest/gnmitest.proto",
}

func init() {
	proto.RegisterFile("proto/gnmitest/gnmitest.proto", fileDescriptor_gnmitest_6b5de2d96d8e75ee)
}

var fileDescriptor_gnmitest_6b5de2d96d8e75ee = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xcf, 0xcb, 0xcd, 0x2c, 0x49, 0x2d, 0x2e, 0x81, 0x33, 0xf4, 0xc0, 0xe2, 0x42,
	0x1c, 0x30, 0xbe, 0x94, 0x59, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e,
	0x7e, 0x41, 0x6a, 0x5e, 0x72, 0x7e, 0x5e, 0x5a, 0x66, 0x3a, 0x42, 0x23, 0xc4, 0x9c, 0xe2, 0xd2,
	0xcc, 0x92, 0x54, 0x08, 0x09, 0x31, 0x41, 0xca, 0x82, 0x28, 0x7d, 0x45, 0xa9, 0x05, 0xf9, 0x45,
	0x25, 0x50, 0x0a, 0xa2, 0xd3, 0x48, 0x9f, 0x8b, 0xc3, 0xdd, 0xcf, 0xd7, 0x33, 0x24, 0xb5, 0xb8,
	0x44, 0x48, 0x99, 0x8b, 0x39, 0xa8, 0x34, 0x4f, 0x88, 0x47, 0x0f, 0x62, 0x74, 0x30, 0x88, 0x94,
	0xe2, 0xd3, 0x83, 0xaa, 0x0f, 0x02, 0x53, 0x49, 0x6c, 0x60, 0x7d, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xb2, 0x2c, 0x69, 0x44, 0xd4, 0x00, 0x00, 0x00,
}
