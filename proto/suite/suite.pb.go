// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/suite/suite.proto

package suite

/*
The suite package defines a test suite that is executed within the gnmitest
framework.

A Suite message defines a set of tests that are to be run as part of a common
test report. Each Suite contains a set of InstanceGroups, which in turn
contain test instances, as shown below:

  - Suite
     - InstanceGroup (description: "group1")
        - Instance   (description: "test1")
        - Instance   (description: "test2")
     - InstanceGroup (description: "group2")
        - Instance   (description: "test3")
     - InstanceGroup (description: "group3")
        - Instance   (description: "test4")

In this case, a single suite contains three instance groups (groups 1, 2 and
3). InstanceGroups are executed sequentially, in the order that they are
defined within the Suite message.

Instances (i.e., individual tests) within an InstanceGroup are run in
parallel - such that the framework does not wait for the previous test to
complete before launching the next test within the instance group.

In the example above, "test1" and "test2" will be executed simultaneously.
When both test1 and test2 have completed, test3 will be executed followed by
test4.

If any of the InstanceGroups specified set the "fatal" field to true,
subsequent InstanceGroups are not executed, and the test is considered
failed. This control can be used to check pre-requisites of the tests prior
to subsequent test execution.

Users should take care to ensure that tests that are defined within
the same InstanceGroup do not overlap with one another, particularly where
they involve manipulating the state of the gNMI target rather than simply
reading from it.

Tests can specify a schema that is expected to be used as part of the test,
which reflects a compiled-in set of data structures that can be used to
handle the payload of the gNMI RPC. The supported format of these data
structures are Go structs that are produced by ygot
(https://github.com/openconfig/ygot). If the top-level Suite specifies a
schema, all tests that do not specify an overridden schema inherit it.
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gnmi "github.com/openconfig/gnmi/proto/gnmi"
import tests "github.com/openconfig/gnmitest/proto/tests"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Suite is the main proto message that comprises all the test configuration
// for test framework.
type Suite struct {
	// Name of the suite. Used for reporting purposes.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Amount of time in seconds a test is allowed to run before cancelled.
	// This can be overridden by individual tests.
	Timeout int32 `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Schema denotes which version of compiled gostructs to use in the test. If
	// test doesn't specify one, the one specified in Suite will be effective.
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// Connection parameters to use while dialing into target. This must be set
	// here or in all individual tests. If set both here and a test, the test
	// instance takes precedence.
	Connection *tests.Connection `protobuf:"bytes,4,opt,name=connection,proto3" json:"connection,omitempty"`
	// Set of ExtensionList that can be referenced while composing
	// openconfig.test.Instance.
	ExtensionList map[string]*ExtensionList `protobuf:"bytes,10,rep,name=extension_list,json=extensionList,proto3" json:"extension_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of openconfig.test.InstanceGroup that comprises the test suite.
	// openconfig.test.InstanceGroups run serially. However the tests within
	// openconfig.test.InstanceGroup run in parallel.
	InstanceGroupList []*InstanceGroup `protobuf:"bytes,15,rep,name=instance_group_list,json=instanceGroupList,proto3" json:"instance_group_list,omitempty"`
	// A set of common request and response messages which can be referenced
	// from individual tests to reduce duplication of messages in the test
	// specification.
	Common               *CommonMessages `protobuf:"bytes,16,opt,name=common,proto3" json:"common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Suite) Reset()         { *m = Suite{} }
func (m *Suite) String() string { return proto.CompactTextString(m) }
func (*Suite) ProtoMessage()    {}
func (*Suite) Descriptor() ([]byte, []int) {
	return fileDescriptor_suite_96c2b12b836883c5, []int{0}
}
func (m *Suite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Suite.Unmarshal(m, b)
}
func (m *Suite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Suite.Marshal(b, m, deterministic)
}
func (dst *Suite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Suite.Merge(dst, src)
}
func (m *Suite) XXX_Size() int {
	return xxx_messageInfo_Suite.Size(m)
}
func (m *Suite) XXX_DiscardUnknown() {
	xxx_messageInfo_Suite.DiscardUnknown(m)
}

var xxx_messageInfo_Suite proto.InternalMessageInfo

func (m *Suite) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Suite) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Suite) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Suite) GetConnection() *tests.Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (m *Suite) GetExtensionList() map[string]*ExtensionList {
	if m != nil {
		return m.ExtensionList
	}
	return nil
}

func (m *Suite) GetInstanceGroupList() []*InstanceGroup {
	if m != nil {
		return m.InstanceGroupList
	}
	return nil
}

func (m *Suite) GetCommon() *CommonMessages {
	if m != nil {
		return m.Common
	}
	return nil
}

// InstanceGroup is a list of openconfig.test.Instances to run in parallel.
// RPC requests for tests in this group will be made in parallel.
type InstanceGroup struct {
	// Description of the instance group. Used for reporting purposes.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Name of the openconfig.test.Instances to run in parallel.
	Instance []*Instance `protobuf:"bytes,2,rep,name=instance,proto3" json:"instance,omitempty"`
	// Whether the failure of a test within the InstanceGroup should be considered
	// fatal for the Suite. If set to true, when one or more of the tests within
	// the group fails, all subsequent groups are not executed.
	Fatal                bool     `protobuf:"varint,3,opt,name=fatal,proto3" json:"fatal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceGroup) Reset()         { *m = InstanceGroup{} }
func (m *InstanceGroup) String() string { return proto.CompactTextString(m) }
func (*InstanceGroup) ProtoMessage()    {}
func (*InstanceGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_suite_96c2b12b836883c5, []int{1}
}
func (m *InstanceGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceGroup.Unmarshal(m, b)
}
func (m *InstanceGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceGroup.Marshal(b, m, deterministic)
}
func (dst *InstanceGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceGroup.Merge(dst, src)
}
func (m *InstanceGroup) XXX_Size() int {
	return xxx_messageInfo_InstanceGroup.Size(m)
}
func (m *InstanceGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceGroup.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceGroup proto.InternalMessageInfo

func (m *InstanceGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *InstanceGroup) GetInstance() []*Instance {
	if m != nil {
		return m.Instance
	}
	return nil
}

func (m *InstanceGroup) GetFatal() bool {
	if m != nil {
		return m.Fatal
	}
	return false
}

// Instance is what the framework treats as a test. It contains all the
// information to run and report a test.
type Instance struct {
	// Description of the Instance. Used for reporting purposes.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Test configuration to use.
	Test *tests.Test `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
	// List of openconfig.test.ExtensionList to run as part of this test.
	// The tests run within the same context as the test specified in
	// this message - and have access to the same requests (e.g.,
	// subscription in the case of Subscribe tests).
	ExtensionList        []string `protobuf:"bytes,3,rep,name=extension_list,json=extensionList,proto3" json:"extension_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Instance) Reset()         { *m = Instance{} }
func (m *Instance) String() string { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()    {}
func (*Instance) Descriptor() ([]byte, []int) {
	return fileDescriptor_suite_96c2b12b836883c5, []int{2}
}
func (m *Instance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instance.Unmarshal(m, b)
}
func (m *Instance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instance.Marshal(b, m, deterministic)
}
func (dst *Instance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instance.Merge(dst, src)
}
func (m *Instance) XXX_Size() int {
	return xxx_messageInfo_Instance.Size(m)
}
func (m *Instance) XXX_DiscardUnknown() {
	xxx_messageInfo_Instance.DiscardUnknown(m)
}

var xxx_messageInfo_Instance proto.InternalMessageInfo

func (m *Instance) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Instance) GetTest() *tests.Test {
	if m != nil {
		return m.Test
	}
	return nil
}

func (m *Instance) GetExtensionList() []string {
	if m != nil {
		return m.ExtensionList
	}
	return nil
}

// ExtensionList is a list of extensions. They run as part of the subscription
// created for the parent test in openconfig.test.Instance.
type ExtensionList struct {
	Extension            []*tests.Test `protobuf:"bytes,1,rep,name=extension,proto3" json:"extension,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ExtensionList) Reset()         { *m = ExtensionList{} }
func (m *ExtensionList) String() string { return proto.CompactTextString(m) }
func (*ExtensionList) ProtoMessage()    {}
func (*ExtensionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_suite_96c2b12b836883c5, []int{3}
}
func (m *ExtensionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtensionList.Unmarshal(m, b)
}
func (m *ExtensionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtensionList.Marshal(b, m, deterministic)
}
func (dst *ExtensionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtensionList.Merge(dst, src)
}
func (m *ExtensionList) XXX_Size() int {
	return xxx_messageInfo_ExtensionList.Size(m)
}
func (m *ExtensionList) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtensionList.DiscardUnknown(m)
}

var xxx_messageInfo_ExtensionList proto.InternalMessageInfo

func (m *ExtensionList) GetExtension() []*tests.Test {
	if m != nil {
		return m.Extension
	}
	return nil
}

// CommonMessages specifies a set of gNMI messages that are referred to
// across multiple tests. This ensures that where the same message is required
// (e.g., a SetRequest that specifies a safe initial configuration) then it
// does not require repetition in the test specification.
//
// Each specificiation is a map keyed by a unique identifying name for the
// message value of the map.
type CommonMessages struct {
	SetRequests          map[string]*gnmi.SetRequest       `protobuf:"bytes,1,rep,name=set_requests,json=setRequests,proto3" json:"set_requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GetRequests          map[string]*gnmi.GetRequest       `protobuf:"bytes,3,rep,name=get_requests,json=getRequests,proto3" json:"get_requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GetResponses         map[string]*gnmi.GetResponse      `protobuf:"bytes,4,rep,name=get_responses,json=getResponses,proto3" json:"get_responses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SubscribeRequests    map[string]*gnmi.SubscribeRequest `protobuf:"bytes,5,rep,name=subscribe_requests,json=subscribeRequests,proto3" json:"subscribe_requests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CommonMessages) Reset()         { *m = CommonMessages{} }
func (m *CommonMessages) String() string { return proto.CompactTextString(m) }
func (*CommonMessages) ProtoMessage()    {}
func (*CommonMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_suite_96c2b12b836883c5, []int{4}
}
func (m *CommonMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonMessages.Unmarshal(m, b)
}
func (m *CommonMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonMessages.Marshal(b, m, deterministic)
}
func (dst *CommonMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonMessages.Merge(dst, src)
}
func (m *CommonMessages) XXX_Size() int {
	return xxx_messageInfo_CommonMessages.Size(m)
}
func (m *CommonMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonMessages.DiscardUnknown(m)
}

var xxx_messageInfo_CommonMessages proto.InternalMessageInfo

func (m *CommonMessages) GetSetRequests() map[string]*gnmi.SetRequest {
	if m != nil {
		return m.SetRequests
	}
	return nil
}

func (m *CommonMessages) GetGetRequests() map[string]*gnmi.GetRequest {
	if m != nil {
		return m.GetRequests
	}
	return nil
}

func (m *CommonMessages) GetGetResponses() map[string]*gnmi.GetResponse {
	if m != nil {
		return m.GetResponses
	}
	return nil
}

func (m *CommonMessages) GetSubscribeRequests() map[string]*gnmi.SubscribeRequest {
	if m != nil {
		return m.SubscribeRequests
	}
	return nil
}

func init() {
	proto.RegisterType((*Suite)(nil), "suite.Suite")
	proto.RegisterMapType((map[string]*ExtensionList)(nil), "suite.Suite.ExtensionListEntry")
	proto.RegisterType((*InstanceGroup)(nil), "suite.InstanceGroup")
	proto.RegisterType((*Instance)(nil), "suite.Instance")
	proto.RegisterType((*ExtensionList)(nil), "suite.ExtensionList")
	proto.RegisterType((*CommonMessages)(nil), "suite.CommonMessages")
	proto.RegisterMapType((map[string]*gnmi.GetRequest)(nil), "suite.CommonMessages.GetRequestsEntry")
	proto.RegisterMapType((map[string]*gnmi.GetResponse)(nil), "suite.CommonMessages.GetResponsesEntry")
	proto.RegisterMapType((map[string]*gnmi.SetRequest)(nil), "suite.CommonMessages.SetRequestsEntry")
	proto.RegisterMapType((map[string]*gnmi.SubscribeRequest)(nil), "suite.CommonMessages.SubscribeRequestsEntry")
}

func init() { proto.RegisterFile("proto/suite/suite.proto", fileDescriptor_suite_96c2b12b836883c5) }

var fileDescriptor_suite_96c2b12b836883c5 = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x95, 0xa5, 0x19, 0xed, 0xe9, 0xba, 0xb5, 0x66, 0x94, 0xa8, 0x37, 0x8b, 0x2a, 0xb1,
	0x15, 0x18, 0x29, 0x0c, 0x09, 0xa1, 0xdd, 0x8e, 0x51, 0x4d, 0x1a, 0x12, 0xf2, 0x10, 0x37, 0x20,
	0x55, 0x69, 0x38, 0xcb, 0x2c, 0x1a, 0xbb, 0xd4, 0x0e, 0x62, 0x0f, 0xc2, 0x33, 0xf0, 0x9a, 0x28,
	0xb6, 0xdb, 0x26, 0x6d, 0x36, 0x21, 0x6e, 0x2c, 0xfb, 0xf8, 0xfb, 0x7e, 0x39, 0x7f, 0xac, 0xc0,
	0xe3, 0xd9, 0x5c, 0x28, 0x31, 0x94, 0x19, 0x53, 0x68, 0xd6, 0x50, 0x47, 0x88, 0xa7, 0x0f, 0xbd,
	0x37, 0x09, 0x53, 0x37, 0xd9, 0x24, 0x8c, 0x45, 0x3a, 0x14, 0x33, 0xe4, 0xb1, 0xe0, 0xd7, 0x2c,
	0x19, 0x26, 0x3c, 0x65, 0x0a, 0xa5, 0x1a, 0x1a, 0x7b, 0xbe, 0x95, 0x66, 0x35, 0xf6, 0xde, 0xcb,
	0xbb, 0x7d, 0xd6, 0xa3, 0xb7, 0xf9, 0x62, 0x1c, 0xfd, 0xdf, 0x2e, 0x78, 0x57, 0xf9, 0x37, 0x09,
	0x81, 0x1a, 0x8f, 0x52, 0xf4, 0x9d, 0xc0, 0x19, 0x34, 0xa8, 0xde, 0x13, 0x1f, 0x1e, 0x28, 0x96,
	0xa2, 0xc8, 0x94, 0xbf, 0x15, 0x38, 0x03, 0x8f, 0x2e, 0x8e, 0xa4, 0x0b, 0xdb, 0x32, 0xbe, 0xc1,
	0x34, 0xf2, 0x5d, 0xad, 0xb7, 0x27, 0xf2, 0x0a, 0x20, 0x16, 0x9c, 0x63, 0xac, 0x98, 0xe0, 0x7e,
	0x2d, 0x70, 0x06, 0xcd, 0x93, 0x4e, 0x68, 0x72, 0x3c, 0x5b, 0x5e, 0xd0, 0x82, 0x88, 0xbc, 0x87,
	0x5d, 0xfc, 0xa5, 0x90, 0x4b, 0x26, 0xf8, 0x78, 0xca, 0xa4, 0xf2, 0x21, 0x70, 0x07, 0xcd, 0x93,
	0x83, 0xd0, 0x74, 0x46, 0xa7, 0x17, 0x9e, 0x2f, 0x24, 0x97, 0x4c, 0xaa, 0x73, 0xae, 0xe6, 0xb7,
	0xb4, 0x85, 0xc5, 0x18, 0x79, 0x07, 0x0f, 0x19, 0x97, 0x2a, 0xe2, 0x31, 0x8e, 0x93, 0xb9, 0xc8,
	0x66, 0x06, 0xb6, 0xa7, 0x61, 0xfb, 0x16, 0x76, 0x61, 0x15, 0xa3, 0x5c, 0x40, 0x3b, 0xac, 0x78,
	0xd4, 0x94, 0x17, 0xb0, 0x1d, 0x8b, 0x34, 0x15, 0xdc, 0x6f, 0xeb, 0xe4, 0x1f, 0x59, 0xe3, 0x99,
	0x0e, 0x7e, 0x40, 0x29, 0xa3, 0x04, 0x25, 0xb5, 0xa2, 0xde, 0x67, 0x20, 0x9b, 0x99, 0x91, 0x36,
	0xb8, 0xdf, 0xf1, 0xd6, 0xb6, 0x32, 0xdf, 0x92, 0x67, 0xe0, 0xfd, 0x8c, 0xa6, 0x19, 0xea, 0x3e,
	0xae, 0xd2, 0x29, 0x79, 0xa9, 0x91, 0x9c, 0x6e, 0xbd, 0x75, 0xfa, 0x0a, 0x5a, 0xa5, 0x54, 0x49,
	0x00, 0xcd, 0x6f, 0x28, 0xe3, 0x39, 0x9b, 0xe9, 0xce, 0x1a, 0x74, 0x31, 0x44, 0x9e, 0x43, 0x7d,
	0x51, 0x8e, 0xbf, 0xa5, 0x8b, 0xde, 0x5b, 0x2b, 0x9a, 0x2e, 0x05, 0x64, 0x1f, 0xbc, 0xeb, 0x48,
	0x45, 0x53, 0x3d, 0xbe, 0x3a, 0x35, 0x87, 0xbe, 0x82, 0xfa, 0x42, 0xfb, 0x0f, 0x1f, 0x3c, 0x80,
	0x5a, 0x3e, 0x58, 0x5b, 0x52, 0xd3, 0x4e, 0xf9, 0x13, 0x4a, 0x45, 0xf5, 0x05, 0x79, 0xb2, 0x31,
	0x59, 0x37, 0x70, 0x07, 0x8d, 0xb5, 0xc1, 0xf5, 0x4f, 0xa1, 0x55, 0xea, 0x03, 0x79, 0x0a, 0x8d,
	0xa5, 0xc2, 0x77, 0x74, 0x29, 0x25, 0xfa, 0xea, 0xb6, 0xff, 0xc7, 0x83, 0xdd, 0xf2, 0x68, 0xc8,
	0x05, 0xec, 0x48, 0x54, 0xe3, 0x39, 0xfe, 0xc8, 0x72, 0x8b, 0x05, 0x1c, 0x56, 0xce, 0x31, 0xbc,
	0x42, 0x45, 0xad, 0xd0, 0x3c, 0xaa, 0xa6, 0x5c, 0x45, 0x72, 0x54, 0x52, 0x44, 0xb9, 0xf7, 0xa1,
	0x46, 0x1b, 0xa8, 0xa4, 0x80, 0xba, 0x84, 0x96, 0x41, 0xc9, 0x99, 0xe0, 0x12, 0xa5, 0x5f, 0xd3,
	0xac, 0xa3, 0x7b, 0x58, 0x56, 0x69, 0x60, 0x3b, 0x49, 0x21, 0x44, 0xbe, 0x00, 0x91, 0xd9, 0x24,
	0x1f, 0xc5, 0x04, 0x57, 0xe9, 0x79, 0x1a, 0x79, 0x7c, 0x47, 0xa5, 0x0b, 0x7d, 0x39, 0xc9, 0x8e,
	0x5c, 0x8f, 0xf7, 0x3e, 0x42, 0x7b, 0xbd, 0x2d, 0x15, 0x2f, 0xfa, 0xb0, 0xfc, 0xa2, 0xdb, 0xa1,
	0xfe, 0xab, 0xac, 0x8c, 0x85, 0xd7, 0x9c, 0x13, 0x47, 0xff, 0x4b, 0x1c, 0x55, 0x12, 0x29, 0x74,
	0x36, 0x7a, 0x54, 0x81, 0x3c, 0x2a, 0x23, 0x3b, 0x05, 0xa4, 0x71, 0x16, 0x99, 0x5f, 0xa1, 0x5b,
	0xdd, 0xa4, 0x0a, 0xf0, 0x71, 0x19, 0xdc, 0xb5, 0xd5, 0xaf, 0xd9, 0x0b, 0xf4, 0xc9, 0xb6, 0xfe,
	0xe1, 0xbe, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xd1, 0x68, 0x51, 0xfc, 0x05, 0x00, 0x00,
}
